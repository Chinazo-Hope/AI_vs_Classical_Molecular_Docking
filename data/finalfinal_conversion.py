"""
convert_ligands.py

This script performs automated batch conversion of ligand-only `.pdb` files into two widely used formats:
- `.sdf` (Structure Data File): suitable for cheminformatics applications, molecular similarity calculations, and 3D visualization in tools like RDKit or PyMOL.
- `.pdbqt`: required for molecular docking using GNINA, AutoDock Vina, and AutoDock-GPU.

It recursively searches the `data/ligands/` directory (generated by the previous VMD extraction step) for `.pdb` files
that represent individual ligand structures. It ignores any test files or test folders (e.g., containing 'TEST' in name/path),
and converts each valid file using the Open Babel command-line tool (`obabel`), assuming it is installed and accessible.

Converted output files are saved in:
- `data/ligands_sdf/` for `.sdf` files
- `data/ligands_pdbqt/` for `.pdbqt` files

Both output directories are created automatically if they do not already exist.

The script logs the number of successful and failed conversions for each format, but **does not skip or overwrite files** by default,
to ensure complete and reproducible processing of all ligands.

Author: Chinazo Emeh  
Date: 14 July 2025  
Requirements:  
- Open Babel must be installed and `obabel` accessible in the system PATH  
  (https://openbabel.org/docs/dev/Installation/install.html)
"""

import subprocess               # Used to call Open Babel via the command line
from pathlib import Path        # For modern and platform-independent file path handling

# === CONFIGURATION === #

# Define the top-level project directory
project_dir = Path("/Users/chinazoemeh/HopeMScP")

# Path to the input ligand folders (each contains a single .pdb ligand)
ligands_dir = project_dir / "data" / "ligands"

# Path to store .sdf output files (used for cheminformatics or RDKit workflows)
sdf_output_dir = project_dir / "data" / "ligands_sdf"

# Path to store .pdbqt output files (used for GNINA or AutoDock docking workflows)
pdbqt_output_dir = project_dir / "data" / "ligands_pdbqt"

# Create output directories if they do not exist (ensures script doesn't crash on first run)
sdf_output_dir.mkdir(parents=True, exist_ok=True)
pdbqt_output_dir.mkdir(parents=True, exist_ok=True)

# === TOGGLE CONVERSIONS === #
# Set these to False if you only want one of the two formats
convert_to_sdf = True
convert_to_pdbqt = True

# === TRACK CONVERSION RESULTS === #
# These counters help track how many files were processed successfully vs failed
sdf_success, sdf_fail = 0, 0
pdbqt_success, pdbqt_fail = 0, 0

# === MAIN CONVERSION LOOP === #
# Recursively walk through all .pdb files inside data/ligands/

for pdb_file in ligands_dir.rglob("*.pdb"):
    # Skip test files or folders (you used 'TEST' in earlier debugging scripts)
    if "TEST" in pdb_file.name or "TEST" in pdb_file.parts:
        continue

    # Extract the filename without extension to build output names (e.g., BRD4-BD1_1_7RUI)
    base_name = pdb_file.stem

    # Define full output paths for the converted files
    sdf_path = sdf_output_dir / f"{base_name}.sdf"
    pdbqt_path = pdbqt_output_dir / f"{base_name}.pdbqt"

    # === Convert to .sdf Format === #
    if convert_to_sdf:
        try:
            # Run obabel to convert .pdb to .sdf
            subprocess.run(["obabel", str(pdb_file), "-O", str(sdf_path)], check=True)
            sdf_success += 1
        except subprocess.CalledProcessError:
            # If conversion fails, increment fail count (but don't crash script)
            sdf_fail += 1

    # === Convert to .pdbqt Format === #
    if convert_to_pdbqt:
        try:
            # Run obabel to convert .pdb to .pdbqt (used in docking)
            subprocess.run(["obabel", str(pdb_file), "-O", str(pdbqt_path)], check=True)
            pdbqt_success += 1
        except subprocess.CalledProcessError:
            # Track failed .pdbqt conversions
            pdbqt_fail += 1

# === FINAL SUMMARY REPORT === #
# Print summary of results for reproducibility and debugging
print("\nConversion complete.")
if convert_to_sdf:
    print(f"SDF files:     {sdf_success} succeeded, {sdf_fail} failed")
if convert_to_pdbqt:
    print(f"PDBQT files:   {pdbqt_success} succeeded, {pdbqt_fail} failed")
